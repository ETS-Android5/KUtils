apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

// 华为插件
//apply plugin: 'com.huawei.agconnect'

def lpFile = project.rootProject.file("local.properties")
def inputStream = lpFile.newDataInputStream()
def properties = new Properties()
properties.load(inputStream)

android {

    if (properties.containsKey('store.filePath')) {

        signingConfigs {
            release {
                storeFile file(properties.getProperty('store.filePath'))
                storePassword properties.getProperty('store.filePassword')
                keyAlias properties.getProperty('store.keyAlias')
                keyPassword properties.getProperty('store.keyPassword')
            }
        }
    }

    compileSdkVersion parent.ext.compileSdkVersion
    buildToolsVersion parent.ext.buildToolsVersion

    defaultConfig {
//        applicationId "com.kiven.sample"
        applicationId "com.jeeinc.save.worry"
//        minSdkVersion 14
//        minSdkVersion 16
        minSdkVersion 17 // 华为推送要求17
        targetSdkVersion parent.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        multiDexEnabled true



        // 配置了两处，下面还有一处配置，以后检测到底是那一次生效，或者说两处同时配置才生效，海豚车测试是另一处生效
        if (properties.containsKey('store.filePath'))
            signingConfig signingConfigs.release
    }
    buildTypes {
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'


            // 配置了两处，上面还有一处配置，以后检测到底是那一次生效，或者说两处同时配置才生效, 海豚车测试，是这一处生效
            if (properties.containsKey('store.filePath'))
                signingConfig signingConfigs.release
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            /*manifest.srcFile 'src/main/AndroidManifest.xml'
                java.srcDirs = ['src']
                resources.srcDirs = ['src']
                aidl.srcDirs = ['src']
                renderscript.srcDirs = ['src']
                res.srcDirs = ['res']
                assets.srcDirs = ['assets']*/
//            res.srcDirs = ['src/main/res', 'src/main/res/layout']// 有这句代码的话，布局文件改变，不能实时运行到手机，必须clean project 后运行，才有效果
            jniLibs.srcDirs = ['xunfeiLibs', 'zxingLibs', 'mimcLibs', 'libs', 'tbsLibs', 'miPush', 'oppoPush', 'vivoPush']
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

project.tasks.withType(JavaCompile) { task ->
    options.compilerArgs << "-AguiceAnnotationDatabasePackageName=com.kiven.sample"
}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation fileTree(dir: 'xunfeiLibs', include: ['*.jar', '*.bak'])
    implementation fileTree(dir: 'mimcLibs', include: ['*.jar', '*.bak'])
    // tbs
    implementation fileTree(dir: 'tbsLibs', include: ['*.jar', '*.bak'])
//    implementation 'com.tencent.tbs.tbssdk:sdk:43697'
//    implementation fileTree(dir: 'miPush', include: ['*.jar', '*.bak'])
    // OPPO推送
    implementation fileTree(dir: 'oppoPush', include: ['*.jar', '*.bak'])
    // vivo推送
//    implementation fileTree(dir: 'vivoPush', include: ['*.jar', '*.bak', '*.aar'])

    testImplementation 'junit:junit:4.12'
    implementation project(':kutils')
    implementation project(':kutils-ktx')
    implementation project(':pushlibrary')
    //    compile project(':EveryshereLibrary')

    implementation 'androidx.multidex:multidex:2.0.1'

    implementation "com.google.android.material:material:1.0.0"
    implementation "androidx.recyclerview:recyclerview:1.1.0"

    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.0"
    implementation "org.jetbrains.anko:anko:$anko_version"

    // animation & transition
    implementation "androidx.dynamicanimation:dynamicanimation:1.0.0"
    implementation "androidx.dynamicanimation:dynamicanimation:1.0.0"

    // CameraX core library
    def camerax_version = "1.0.0-alpha08"
    implementation "androidx.camera:camera-core:$camerax_version"
    // If you want to use Camera2 extensions
//    implementation "androidx.camera:camera-camera2:$camerax_version"

    // ViewModel and LiveData
//    implementation "android.arch.lifecycle:extensions:1.1.1"
//    annotationProcessor "android.arch.lifecycle:compiler:1.1.1"

    implementation 'me.grantland:autofittextview:0.2.1'
    //    compile 'com.kiven.kutils:kutils:1.0.0'
//    compile 'org.roboguice:roboguice:3.0.1'
//    compile 'org.roboguice:roboblender:3.0.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation('com.h6ah4i.android.widget.advrecyclerview:advrecyclerview:0.10.3@aar') {
        transitive = true
    }
    implementation 'com.jcodecraeer:xrecyclerview:1.5.9'
    implementation 'com.flyco.dialog:FlycoDialog_Lib:1.3.2@aar'
    implementation project(':xutils')

    implementation 'com.android.volley:volley:1.1.1'
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.11'

    implementation 'com.google.android:flexbox:1.0.0'

    // https://github.com/koush/AndroidAsync
    implementation 'com.koushikdutta.async:androidasync:2.2.1'
//    compile 'com.koushikdutta.ion:ion:2.2.11' // https://github.com/koush/ion

    // 获取设备正在运行的进程: https://github.com/jaredrummler/AndroidProcesses
    implementation 'com.jaredrummler:android-processes:1.1.1'

    // 二维码
//    implementation 'com.google.zxing:core:3.2.1'
//    implementation 'com.journeyapps:zxing-android-embedded:3.3.0'
    implementation 'cn.bingoogolapple:bga-qrcode-zxing:1.3.6'
    // okhttp https://github.com/square/okhttp
    implementation 'com.squareup.okhttp3:okhttp:4.3.1'


    implementation 'cn.jiguang.imui:messagelist:0.7.4'
    implementation 'cn.jiguang.imui:chatinput:0.9.1'


    implementation 'com.google.protobuf:protobuf-lite:3.0.0'// 小米即时通讯用到

    implementation 'com.github.bumptech.glide:glide:4.10.0'
    kapt 'com.github.bumptech.glide:compiler:4.10.0'

    // slices
    implementation 'androidx.slice:slice-builders:1.0.0'

    // ExoPlayer
    implementation 'com.google.android.exoplayer:exoplayer:2.8.2'

//    implementation 'com.jakewharton:butterknife:10.0.0'
//    kapt 'com.jakewharton:butterknife-compiler:10.0.0'

    // 聊天UI库: https://github.com/stfalcon-studio/ChatKit
    // https://github.com/WangKiven/ChatKit
//    implementation 'com.github.stfalcon:chatkit:0.3.3'
    implementation project(':chatkit')

    // 图表库 MPAndroidChart：https://github.com/PhilJay/MPAndroidChart
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'

    // google-emoji
    implementation "androidx.emoji:emoji-appcompat:1.0.0"
    implementation "androidx.emoji:emoji-bundled:1.0.0"

    // 图片信息获取修改
    implementation 'androidx.exifinterface:exifinterface:1.0.0'

    // https://github.com/rockerhieu/emojicon
    implementation 'io.github.rockerhieu:emojicon:1.4.2'


    // https://github.com/vanniktech/Emoji
    implementation 'com.vanniktech:emoji-ios:0.6.0'
    implementation 'com.vanniktech:emoji-google:0.6.0'
    implementation 'com.vanniktech:emoji-twitter:0.6.0'

    // ARouter: https://github.com/alibaba/ARouter, TODO 需要注意代码混淆和加固的问题, 我们的helper不适用，只能用于activity
    implementation 'com.alibaba:arouter-api:1.5.0'
    kapt 'com.alibaba:arouter-compiler:1.2.2'
    implementation 'androidx.palette:palette-ktx:1.0.0'

    // 基于无障碍服务实现微信多图分享: https://github.com/shichaohui/WXShareMultiImage
//    implementation 'com.sch.share:wx-share:1.0.10'

    // 华为推送
    implementation 'com.huawei.hms:push:3.0.3.301'

}
/*kotlin {
    experimental {
        coroutines "enable"
    }
}*/
// 打印过时api调用信息
/*
allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}*/
